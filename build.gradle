plugins {
    id 'java'
    id 'war'
}

group 'com.knall.peter'
version '0.0'

String addonInfoName = "Modstat"
String addonInfoDescription = "Gather, parse, and find errors in module status reports."
String addonInfoVersion = "0.0"
String addonInfoAuthor = "Forked from ALC Labs"

group 'com.knall.peter'
version '0.0'

repositories {
    mavenCentral()
    maven {
        url "http://repo.alcshare.com"
        allowInsecureProtocol=true
    }
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Requires WebCTRL installation
String webctrlPath='C:\\WebCTRL8.5\\'
dependencies {
    compileOnly files ('C:\\WebCTRL8.5\\modules\\trendframework\\trendframework-8.5.002.jar',
            webctrlPath+'modules\\core\\core-8.5.002.jar',
            webctrlPath+'modules\\commonexceptions\\commonexceptions-8.5.002.jar',
            webctrlPath+'bin\\lib\\commonbaseutils-2.0.3.jar',
            webctrlPath+'modules\\addonsupport\\addonsupport-api-addon-1.9.0.jar',
            webctrlPath+'modules\\alarmmanager\\alarmmanager-api-addon-1.9.0.jar',
            webctrlPath+'modules\\directaccess\\directaccess-api-addon-1.9.0.jar',
            webctrlPath+'modules\\directaccess\\directaccess-api-8.5.002.jar',
            webctrlPath+'modules\\webaccess\\webaccess-api-addon-1.9.0.jar')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.jetbrains:annotations:24.0.1'
    compileOnly('org.json:json:20231013')
}

test {
    useJUnitPlatform()
}

war {
    archiveFileName = "${addonInfoName}.war"
}

tasks.register ("aa_unzipWarContents", Copy) {
    dependsOn "war"
    def inputZipFile = file("build/libs/${addonInfoName}.war")
    def outputDir = file("${buildDir}/libs/${addonInfoName}/webapp")
    from zipTree(inputZipFile)
    into outputDir
}

tasks.register ("ab_createAddonInfo") {
    dependsOn "aa_unzipWarContents"
    new File("${buildDir}/libs/${addonInfoName}", "info.xml").text = """<extension version='1'>
  <name>${addonInfoName}</name>
  <description>${addonInfoDescription}</description>
  <version>${addonInfoVersion}</version>
  <vendor>${addonInfoAuthor}</vendor>
</extension>"""
}

tasks.register ("ac_moveMetaInfDirectory", Copy) {
    dependsOn "ab_createAddonInfo"
    def inputDirectory = file('build/libs/${addonInfoName}/webapp/META-INF')
    def outputDirectory = file('build/libs/${addonInfoName}/META-INF')
    file(inputDirectory).renameTo(outputDirectory)
}

tasks.register ("ad_deleteOldMetaInfDirectory", Delete) {
    dependsOn "ac_moveMetaInfDirectory"
    def inputDirectory = file("build/libs/${addonInfoName}/webapp/META-INF")
    delete inputDirectory

}

tasks.register ("ae_addon", Zip) {
    dependsOn "ad_deleteOldMetaInfDirectory","ab_createAddonInfo"
    archiveFileName = "${addonInfoName}.addon"
    destinationDirectory = file("$buildDir/dist")
    from"$buildDir/libs/${addonInfoName}"
}